# -*- coding: utf-8 -*-
"""Know User’s Behaviors Better with Cohort Analysis in Python

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oyl5CpHq78eIwz0cgJcTDy-M0eI7_yQE

# Cohort Analysis : 
- tracking user behaviors on the product.
- The time period can be changed from month to week even day-basis.


# https://medium.com/@henryfeng/know-users-behaviors-better-with-cohort-analysis-in-python-6c0dfc373963

Methodology :
- Data set exploration and cleaning
- Create a cohort and conduct cohort analysis
- Visualize the cohort analysis results

#  “Online Retail Data Set” from the UCI Machine Learning Repository
#  Transaction between 12/01/2010 and 12/09/2011 for UK-based online retail.

# Load necessary libraries
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import datetime as dt
import numpy as np

"""# Load data"""

from google.colab import drive
# import only specific drive
drive.mount('/gdrive')

# Read dataset
df = pd.read_excel('/gdrive/My Drive/Colab Notebooks/Tutorial/Online Retail.xlsx')

"""# Data Cleaning"""

# Check top 5 rows of data
df.head(5)

"""# 8 features but use only 4 : quantity, invoice date, unit price, customer ID 
# total 541,909 transactions
"""

df.shape

"""# Check missing value"""

df.isna().sum()

"""# Drop 135,080 rows without customer ID
# ---> total transactions = 406,829
"""

df1 = df.dropna(subset=['CustomerID'])
df1.shape

# InvoiceDate column is already shown in datetime type, so no need to conduct further transformation.
df1.info()

"""# Remove duplicate rows, keeping the first one"""

df1 = df1.drop_duplicates()

df1.shape

"""# Check distribution of the numeric variables — Quantity and UnitPrice"""

df1.describe()

"""# Filter only Quantity > 0, UnitPrice > 0"""

df1 = df1[df1['Quantity'] > 0]
df1 = df1[df1['UnitPrice'] > 0]

df1.shape

df1.describe()

"""#BoxPlot Quantity , UnitPrice"""

df1.boxplot(column =['Quantity'])

"""# Remove outliers, Quantity > 70000"""

df1 = df1[df1['Quantity'] < 70000]
df1.boxplot(column =['Quantity'])

df1.boxplot(column = ['UnitPrice'])

df1 = df1[df1['UnitPrice'] < 8000]
df1.boxplot(column =['UnitPrice'])

df1.describe()

"""# Create Cohort & Conduct Cohort Analysis
# - create InvoiceMonth โดยใช้ get_month ไปดึง month จาก InvoiceDate
# - create CohortMonth (first month for the specific user ID when that user shopped at this online retailer หรือ เรียกว่า acquisition month)
"""

def get_month(x):
    return dt.datetime(x.year, x.month, 1)
df1['InvoiceMonth'] = df1['InvoiceDate'].apply(get_month)
# groupby and transform are used for creating the cohort month.
df1['CohortMonth'] = df1.groupby('CustomerID')['InvoiceMonth'].transform('min')

df1.info()

"""# Create cohort index (month difference between invoice month and cohort month ) for each row [or the month lapse between that specific transaction and the first transaction that user made on the website.]"""

def get_date(df, column):
    year = df[column].dt.year
    month = df[column].dt.month
    day = df[column].dt.day
    return year, month, day
invoice_year, invoice_month, _ = get_date(df1, 'InvoiceMonth')
cohort_year, cohort_month, _ = get_date(df1, 'CohortMonth')
year_diff = invoice_year - cohort_year
month_diff = invoice_month - cohort_month
# month_diff + 1 ---> cohortindex start at 1 
df1['CohortIndex'] = year_diff * 12 + month_diff + 1
df1.sample(5)

"""# Create 1st Cohort: User number & Retention Rate
# e.g. The 13th column and 2010–12–1 row means 260 users out of 948 users were still buying things after the 13 months from 2010/12/1
"""

cohort_data = df1.groupby(['CohortMonth', 'CohortIndex'])['CustomerID'].apply(pd.Series.nunique).reset_index()
cohort_count = cohort_data.pivot_table(index = 'CohortMonth',
                                       columns = 'CohortIndex',
                                       values = 'CustomerID')
cohort_count

"""# Transform the absolute number into percentage ---> retention rate"""

cohort_size = cohort_count.iloc[:,0]
retention = cohort_count.divide(cohort_size, axis = 0)
retention.round(3) * 100

plt.figure(figsize = (11,9))
plt.title('Cohort Analysis - Retention Rate')
sns.heatmap(data = retention, 
            annot = True, 
            fmt = '.0%', 
            vmin = 0.0,
            vmax = 0.5,
            cmap = "BuPu_r")
plt.show()

"""#  Visualize the retention rate with Seaborn heatmap to make the result more understandable.

# From the graph
- 2010-12 cohort is the strongest
-  on 2011/11 some strategies might be implemented to increase the return users.
-  About 50% of user from 2010/12 cohort return on 2011/11. Marketing analysts or product analysts might further investigate if some campaigns or feature changes that lead to the higher retention.
- Overall there is not a good retention for the users (the percentage of customers going from month to month are quite low)

# Create the 2nd Cohort: Average Quantity Sold
- see how the purchase quantity changes along with months
"""

cohort_data2 = df1.groupby(['CohortMonth', 'CohortIndex'])['Quantity'].mean().reset_index()
average_quantity  = cohort_data2.pivot_table(index = 'CohortMonth',
                                            columns = 'CohortIndex',
                                       values = 'Quantity').round(1)
average_quantity

# visualization
plt.figure(figsize = (11,9))
plt.title('Cohort Analysis - Average Quantity')
sns.heatmap(data = average_quantity, 
            annot = True, 
            cmap = "RdYlBu")

plt.show()

"""# It is observed that
- within the recent cohort/month, the average quantity on the website was facing a decline. It is a warning signal that users stop buying merchandise on the website. The reason needs further investigation.

# Create the 3rd Cohort: Average Sales
"""

df1['TotalSale'] = df1['Quantity'] * df1['UnitPrice']
cohort_data3 = df1.groupby(['CohortMonth', 'CohortIndex'])['TotalSale'].mean().reset_index()
average_sales  = cohort_data3.pivot_table(index = 'CohortMonth',
                                           columns = 'CohortIndex',
                                      values = 'TotalSale').round(1)
average_sales

plt.figure(figsize = (11,9))
plt.title('Cohort Analysis - Average Sales')
sns.heatmap(data = average_sales, 
            annot = True, 
            cmap = "YlOrBr")
plt.show()

"""# The situation for average sales is parallel with the average quantity, which the retailer faces a significant decline in recent months. How to sustain the buying behaviors will be the issue with thinking for the product/marketing team."""

